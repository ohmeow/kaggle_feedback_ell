# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_run_grid.ipynb.

# %% auto 0
__all__ = ['prep_grid', 'run_grid']

# %% ../nbs/06_run_grid.ipynb 3
import argparse, os
import warnings

import pandas as pd
from itertools import product

from . import config, train_dispatcher, utils, train, create_folds, preprocessing


# silence all the HF warnings
warnings.simplefilter("ignore")
os.environ["TOKENIZERS_PARALLELISM"] = "false"


# %% ../nbs/06_run_grid.ipynb 6
def prep_grid(CFG=config.CFG):
    grid_df = pd.DataFrame(list(product(*[getattr(CFG, x) for x in CFG.grid_params])), columns=CFG.grid_params)
    grid_df["run_id"] = config.get_run_id()
    grid_df = grid_df.rename_axis("grid_id").reset_index()

    return grid_df

# %% ../nbs/06_run_grid.ipynb 10
def run_grid(CFG=config.CFG):

    grid_df = prep_grid(CFG)

    print("This is the experimentation grid:")
    print(grid_df)
    print("")

    print(CFG.random_seed)
    print("Preprocessing and creating folds")
    print("")
    train_df = create_folds.build_folds(
        n_folds=CFG.n_fold,
        seed=CFG.random_seed,
        subset=CFG.subset,
        #strat_feat = CFG.strat_feat,
        preprocess = CFG.preprocess,
        return_file = True,
        save_file = True
        )

    # def build_folds(
    #     ds: str = "train",
    #     save_pre: bool = False,
    #     return_pre: bool = True
    # ):

    print("Training folds")
    print("")
    for i in range(len(grid_df)):


        # print(f"train.run_fold(n_fold = {grid_df.fold[i]}, experiment = '{grid_df.experiments[i]}', run_id = '{grid_df.run_id[i]}',\
        #     grid_id = {grid_df.grid_id[i]}, bs = {grid_df.bs[i]}, n_epoch = {grid_df.n_epoch[i]}, seed = {grid_df.random_seed[i]}, subset = {grid_df.subset[i]})")

        train.run_fold(
            CFG=CFG,
            n_fold=int(grid_df.fold[i]),
            experiment_name=str(grid_df.experiments[i]),
            run_id=str(grid_df.run_id[i]),
            grid_id=int(grid_df.grid_id[i]),
            train_data=train_df,
        )


# %% ../nbs/06_run_grid.ipynb 16
if __name__ == "__main__" and utils.run_env != "local_nb":
    # instantiate argparser
    parser = argparse.ArgumentParser()

    # define args
    parser.add_argument("--experiments", help='experiments to run', type=lambda s: [str(item) for item in s.split(',')], default=config.CFG.experiments)
    parser.add_argument("--subset", type=float, default=config.CFG.subset)
    #parser.add_argument("--strat_feat", type=str, default=config.CFG.strat_feat)
    parser.add_argument("--preprocess", type=str, default=config.CFG.preprocess)
    parser.add_argument("--n_folds", type=int, default=config.CFG.n_fold)
    parser.add_argument('--fold', help='folds to use', type=lambda s: [int(item) for item in s.split(',')], default=config.CFG.fold)
    parser.add_argument("--seed", type=int, default=config.CFG.random_seed)
    
    args = parser.parse_args()

    config.CFG.experiments = args.experiments
    config.CFG.subset = args.subset
    #config.CFG.strat_feat = args.strat_feat
    config.CFG.preprocess = args.preprocess
    config.CFG.n_fold = args.n_folds
    config.CFG.fold = args.fold
    config.CFG.random_seed = args.seed

    run_grid(config.CFG)

